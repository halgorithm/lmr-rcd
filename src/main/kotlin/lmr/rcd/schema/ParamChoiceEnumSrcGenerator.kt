package lmr.rcd.schema

import java.io.File
import java.nio.file.Path
import java.nio.file.Paths

class ParamChoiceEnumSrcGenerator(
    private val def: ParamChoiceEnumDef
) {
    fun generateToDir(outputDirPath: Path) {
        val outputDir = File(outputDirPath.toString())
        val outputFilePath = Paths.get(outputDir.toString(), "${def.enumName}.kt")
        // TODO: throw exception if a file already exists at outputFilePath

        val classSrc = generateSrc(true)

        if (!outputDir.exists()) outputDir.mkdirs()
        File(outputFilePath.toString()).writeText(classSrc)
    }


    fun generateSrc(addDisclaimerComment: Boolean = false): String {
        val disclaimer = if (addDisclaimerComment) "// This class file was generated by ${this::class.simpleName}\n" else ""
        val itemsSrc = def.itemDefs.entries.joinToString(",\n") { (name, value) -> "$name($value)" }

        return (
"""${disclaimer}enum class ${def.enumName}(override val value: Short) : ParamChoice {
${itemsSrc.toDepth(1)};

${generateCompanionSrc().toDepth(1)}
}"""
        )
    }

    private fun generateCompanionSrc(): String =
"""companion object : ParamChoiceCompanion<${def.enumName}>(
    items = values(), unknownItem = ${def.unknownItemName}
) {
    @JvmStatic override fun valueOf(value: Short) = super.valueOf(value)
}"""

}